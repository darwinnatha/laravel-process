<?php

namespace {{ namespace }};

use DarwinNatha\Process\Contracts\TaskInterface;

final readonly class {{ class }} implements TaskInterface
{
    /**
     * Exécute la tâche - accepte n'importe quel type d'entrée
     * 
     * @param mixed $input - Array, Object, Collection, Request, ProcessPayload, etc.
     * @param callable $next
     * @return mixed - Retourne le type que vous voulez
     */
    public function __invoke(mixed $input, callable $next): mixed
    {
        // Exemples d'utilisation selon le type d'entrée :
        
        // Si vous recevez un array :
        // $input['key'] = 'new_value';
        
        // Si vous recevez un Request :
        // $data = $input->validated();
        
        // Si vous recevez un ProcessPayload :
        // $input->set('key', 'value');
        
        // Si vous recevez un DTO/objet :
        // $input->property = 'new_value';
        
        // Votre logique métier ici...
        
        return $next($input);
    }
}
